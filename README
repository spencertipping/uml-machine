I'm not responsible for what happens if you use this.

But if you want to anyway:

Step 1. Create a child that has its own setting for where disk images go.
$ ./uml-machine child ./my-uml-machine
$ ./my-uml-machine root-directory = /home/myname/images         # (can be other things too)

From now on you'll use this child. The nice thing is that the Perl scripts
know not to overwrite the root-directory even when you're doing upgrades.

Step 2. Use that child to create a new Arch Linux instance.
$ ./my-uml-machine child my-arch-instance
$ ./my-arch-instance check
(Follow instructions to make sure the host is ready)
$ ./my-arch-instance create-image       # takes an optional number of GB
$ ./my-arch-instance arch-init-image
$ ./my-arch-instance run

At this point your system is booted. You can change the amount of memory
(defaults to 128M):

$ ./my-arch-instance memory = 512M

The script also knows how to do some other tasks:

$ ./my-arch-instance rescue     # bash prompt inside mounted FS
$ ./my-arch-instance ip-address
$ ./my-arch-instance prefix     # all files live in here
$ ./my-arch-insatnce nuke-image # nuke the disk image and accompanying files

Step 3. Later on, do a git pull and have everything update.
$ git pull
$ for file in *; do
    ./$file update -n
  done

Alternatives to Arch are Debian and Gentoo, specified by using debian-init-image
and gentoo-init-image, respectively. Each distribution caches most of its
downloads, so the first install takes much longer than subsequent ones.

Once your instance is running, a command called /sbin/netup should get networking
going between the host and other UML instances. It also initializes the routing
table so that your instance can connect to the Internet.

Right now only one instance can have Internet connectivity at a time. This is
because I'm using tun/tap to interface to the host, and each tap interface requires
root privileges to configure (so I'm using only one tap interface). I would like to
fix this, however, ideally with a virtual network and a bridge.
